# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 properties 파일 생성(1) - application.properties
      - name: make application.properties
        if: |
          contains(github.ref, 'main') ||
          contains(github.ref, 'develop')
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      # 환경별 yml 파일 생성(2) - dev
      # - name: make application-dev.yml
      #   if: contains(github.ref, 'develop')
      #   run: |
      #     cd ./src/main/resources
      #     touch ./application-dev.yml
      #     echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
      #   shell: bash

      # 환경별 yml 파일 생성(3) - prod
      # - name: make application-prod.yml
      #   if: contains(github.ref, 'main')
      #   run: |
      #     cd ./src/main/resources
      #     touch ./application-prod.yml
      #     echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
      #   shell: bash

      # gradle build
      - name: Build with Gradle
        run: |
          cd ..
          ./gradlew clean build -x test

      # docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/docker-test-prod .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-prod

      # docker build & push to develop
      - name: Docker build & push to dev
        if: contains(github.ref, 'develop')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/docker-test-dev .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-dev

      ## deploy to production
      # - name: Deploy to prod
      #   uses: appleboy/ssh-action@master
      #   id: deploy-prod
      #   if: contains(github.ref, 'main')
      #   with:
      #     host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
      #     username: ubuntu
      #     key: ${{ secrets.PRIVATE_KEY }}
      #     envs: GITHUB_SHA
      #     script: |
      #       sudo docker ps
      #       sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
      #       sudo docker run -d -p 8082:8082 ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
      #       sudo docker image prune -f

      ## deploy to develop
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: contains(github.ref, 'develop')
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
            sudo docker run -d -p 8888:8888 ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
            sudo docker image prune -f

      # slack으로 메시지 발송
      - name: send message to slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: zhtmr
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          mention: here
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required.
        if: always() # Pick up events even if the job fails or is canceled.
#      run: curl -X POST -H "Content-type:application/json" --data '{"text":"배포 완료!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
